==================== URLyBird Application Design Choices ====================

====== Table of Contents ======
1. General
	a. Code Style
	b. Javadoc/Comments
2. Architectural Overview
	a. NetworkedApplication
	b. NetworkedClientApplication
	c. StandAloneApplication
3. Server Side Architecture
	a. DataService Layer
	b. Data Layer
	c. IO Layer
4. Network Communication - RMI vs. Sockets
5. Presentation Layer
	a. MVC Pattern
	b. Searching
6. Domain Object
7. Database Decisions
	a. DuplicateKeyException
	b. RandomAccessFile
	c. Limitation
8. Property File Decisions
	a. PropertyManager
	b. Server Host Name & Port
9. Concurrency and Locking Decisions
	a. Server Responsibility
10. General Decisions and Considerations
	a. HotelRoomView GUI
	b. ServerUI GUI
	c. 48-hour Rule
	d. Packaging Structure
	e. Keeping Clients up-to-date
	f. Logging
	g. Rebooking of records

1. General
--------------------------------------------
a. Code Style

	I have used expressive names for classes/methods and variables so that it should be easier for a 
	junior programmer to understand what a class or method doing.

b. Javadoc/Comments

	Javadoc is added to every class, all methods and attributes, regardless of their access modifier.
	I have tried to avoid single line comments and instead explain as much as possible in the javadoc 
	comments. 
	This allows a centralized documentation for all operations in my application, which I think is 
	useful for junior developers.
	
	Though sometimes, I felt the code(i.e. DBParser.java and HotelRoomView.java) needed additional 
	clarification and single line comments were unavoidable.

2. Architectural Overview
--------------------------------------------
The thing I was particularly concerned with while designing the application, was how to split between 
Networked and Stand-alone mode. My main goal to minimize code replication and maximize code 
maintainability. So, I have decided to make majority of client and server code unaware of the mode the 
application is running in. 
 
On start up, the application creates an instance of an Application based on the start mode 
(NetworkedClientApplication, NetworkedApplication or StandAloneApplication) using a factory. These 
applications perform the specific tasks that differentiate the modes. So, all code outside these 
"Applications" code stays unaware of the application mode, which allows complete code re-use.
 
a. NetworkedApplication
 	
	The NetworkedApplication is basically the server application. On start up, this application 
	presents the ServerUI which allows the user to enter a valid database location. 
	The main problem was to keep the server side code networking unaware while 
		# allowing the server side code to stay re-usable and
		# allowing the Application to publish the server interface correctly. 
	Therefore, the ServerUI is dependency injected with the Application mode running. This allows the 
	ServerUI code call the #launch() method of the Application that created the ServerUI.
	
	When the Start button of the ServerUI is pressed, the relevant Application's #launch() method is 
	executed. The NetworkedApplication#launch() method creates an instance of DataService which is then
	published via RMI for use by NetworkedClientApplication.

b. NetworkedClientApplication

	On start up, the NetworkedClientApplication presents the user with the ClientUI which allows the 
	user to enter the location of the NetworkedApplication.
	The main problem was to keep the client side code networking unaware while 
		# allowing the client side to connect to the server side without knowing whether it was using 
		RMI or not.
	Therefore, the ClientUI is dependency injected with the Application mode running. This allows the 
	ClientUI code call the #launch() method of the Application that created the ClientUI.
	
	When the OK button of the ClientUI is pressed, the DataService instance over RMI is retrieved and 
	the	relevant Application's #launch() method is executed. The NetworkedClientApplication#launch() 
	method creates an instance of HotelRoomController by passing the DataService instance retrieved in 
	the previous step. So, HotelRoomController stays unaware of it's networking state, using only the 
	instance of	DataService to communicate with	the server side code.
	
c. StandAloneApplication

	The StandAloneApplication starts the ServerUI like the NetworkedApplication. The only difference 
	being is that the ServerUI is dependency injected an instance of StandAloneApplication. 
	In StandAloneApplication#launch(), it creates an instance of DataService, and initialize an 
	instance of HotelRoomController by passing the DataService instance just created.
 
3. Server Side Architecture
--------------------------------------------
The server side architecture consists of three layers, the DataService
layer, the Data layer and the IO layer.

a. DataService Layer

	The DataService layer is the server interface callable by clients. It is responsible for 
		# managing the locking and thread safety of all reads and writes made by clients and 
		# any business logic that needs to be performed, i.e. exact match.
		
	I have introduced the DataService layer to enable clients to talk to the server without having to 
	do any locking. This server side business layer was a simple solution to address that problem.
	The DataService layer gets an instance of Data using a factory, then it passes calls(read/write) to
	this Data instance.
  
b. Data Layer

	The Data layer is responsible for
		# managing all the data records for the	application. 
	The Data object is created via a factory which retrieves the database location from the application
	"suncertify.properties" file and passes the	location to the Data object. 
	
	On initialization, the Data object uses the DBParser to build a cache of the data records. 
	
	I have decided to use a cache as this enabled me to keep keep all the methods of the DBMain 
	interface to be simple and clean. The cache is a write through cache which allows for fast and 
	efficient reads while keeping the on disk database constantly up-to-date. I have preferred a write
	through cache as I didn't want	the database file out of sync with what was shown on the clients'.
	This was a least error prone cache implementation considering other options, i.e., write cache to 
	the on disk database on exit.
	
	This layer also provides the locking mechanisms that allow for thread safety while reading/writing 
	from/to the Data instance. 
  
b. IO Layer

	The IO layer is responsible for dumb reading and writing to the database file. I have decided to 
	introduce this layer, as reading and writing to the database file using  proper database schema can 
	be complex.
	
	This abstraction helps isolating code changes to this layer in case future changes to the database 
	schema. In summary, IO Layer
		# offers improved maintainability
		# simplifies the complex read/write from/to database, therefore helps those who are unfamiliar 
		with the code understand it.
		
		
4. Network Communication - RMI vs. Sockets
--------------------------------------------

I have chosen to use RMI over Sockets for a number of general reasons:
	# Less code needed to implement the server in RMI than sockets
	# Easier to maintain an RMI server using the Factory pattern than a
	multi-threaded sockets server
	# RMI is object oriented and is not limited to a single platform

In addition, RMI supported my particular design/architecture by
	# offering code simplicity and extensibility where I could re-use as much code as possible 
	without having to implement the same functionality twice.
	# allowing me to have a single server interface used in both networked and stand-alone mode,
	and the only difference in the two modes was, networked published the interface via RMI whereas
	stand-alone mode creates a local instance of the interface implementation.
	This would be very complicated to achieve using serialization and sockets.


5. Presentation Layer
--------------------------------------------
a. MVC Pattern
	
	I have opted to implement a strict MVC pattern where neither the HotelRoomTableModel nor the 
	HotelRoomView classes have any knowledge of each other or of the HotelRoomController.
	
	This means that if the HotelRoomView is replaced in the future it will have	no impact on the 
	HotelRoomTableModel and vice versa. Also if the HotelRoomController is replaced, there is no 
	impact on either the HotelRoomTableModel or the	HotelRoomView.
	
	The down side of this approach is that there is more code between the 3	components. For example, 
	HotelRoomView must provide a method that returns the searchButton and HotelRoomController then 
	calls that method and adds an ActionListener to it, rather than HotelRoomView just adding the 
	ActionListener and calling HotelRoomController when the button is pressed.

	The HotelRoomView is split up into multiple Panels that extend JPanel. I have chosen this for 
	modularity and maintainability purposes. So if for instance the search functionality was to be
	replaced a new JPanel containing the new search components could be created	and swapped for the 
	existing SearchPanel making extending the application simpler.


b. Searching

	The search feature allows to search for available rooms based on all available fields, i.e., Name, 
	Location, Size, Smoking, Rate, Date and Owner(customer ID). Each field has a text box where user 
	can	enter the value to search on. Leaving a search box empty will not filter search results	by that
	field.

	Searches may be strict or not. I have used an "Exact match" check-box to control this so that to be
	able offer more flexible search mechanism. When the "Exact match" box is unchecked the search will 
	return rooms whose fields contain the search criteria. I.e. searching 'is' will match 'Metropolis' 
	'Digitopolis' and 'Atlantis'.


6. Domain Object
--------------------------------------------

I had two options on how I was to store the data records read from the database. 

	# First option was to adhere to the limitations of the DBMain interface and use String[]'s 
	everywhere for storing the data records.
	# Second option was to use a domain object for data storage. 
	
I have utilized both of the these approaches:

	# In the IO & Data layer I have kept the reading and writing of the data records generic, using 
	only String arrays. This allowed these two low level tiers be completely generic, therefore if 
	changes to the database schema ever occur it should not have any impact of these two tiers once the
	new schema is reflected in the DBSchema class.
	# The DataService layer converts to and from a HotelRoom domain object. This gives me greater 
	control over the data stored in the records and makes all the client side code more readable and 
	maintainable as it only deals with these well structured HotelRoom objects.

7. Database Decisions
--------------------------------------------
a. DuplicateKeyException

	I have defined Hotel Name & Address combination as a primary key. I came to this conclusion after 
	analyzing the original database file and verifying that there is no Hotel Name & Address duplicates.	
	So, a DuplicateKeyException is thrown if a record with same Hotel name & Address as an existing 
	record is created.

b. RandomAccessFile

	I have used RandomAccessFile to read/write to the database file. This was my first time	using 
	RandomAccessFile but I found it easy to use and efficient. I did research on RandomAccessFile vs.
	FileInputStream/FileOutputStream which I had used before. RandomAccessFile can use one instance to 
	both read and write and the seek() method is noticeably faster than FileInputStream's skip() method when
	reading the file.

c. Limitation

    Creating a new record has a limitation where an empty custId must be passed in in the data String 
    array like so: data.create(new String[] {"Elephant Inn", "Emerald City", "6", "N", "$120.00", 
    "2005/02/03",""}); 
	This because the implementation of the create method works on the premise that all data criteria 
	are in the String[], the data for the custId can be populated or empty but like the other data 
	fields it will be expanded out to the max field size in bytes before being written to the database.

8. Property file Decisions
--------------------------------------------
a. PropertyManager

	I have utilized a singleton PropertyManager class to deal with persistence of properties. The 
	property manager deals with saving and loading of persistent properties and creates	a 
	suncertify.properties file if the application can not find an existing one.

b. Server Host Name & Port

    I have specified the server name as "localhost", and port as "1099" by default. It is not possible 
    to run the application on any other port, port is not a configurable entity.    
    User is not allowed to enter a hostname when starting the server, the server will always start on 
    localhost and clients can enter a hostname to connect to, it will be localhost on the same machine 
    and whatever the ip address of the machine is when running from another machine.

9. Concurrency and Locking Decisions
--------------------------------------------

Locking on server side was required me to make a choice among various options. I wanted my locking 
mechanism to offer simplicity, speed and reliability. I used ReentrantLock as it out performs the use
of synchronized keyword. Using ReentrantLock offered me more flexibility. 

I utilized two separate locking mechanisms; one lock for read/update/delete; one lock for create. This 
way, client is still able to create without blocking any other read/update/delete operation 
unnecessarily. This approach offers better server performance.

A single ReentranLock is used for create operation and this lock can't be manipulated by any other 
class other than Data.java class. Data#create() method tries to acquire the create lock when user 
attempts to create a record. Only one thread can access the create method at a time.

For other operations, i.e., read, update and delete, there is a separate ReentrantLock used for each 
record in the database. This approach allows for multiple clients to update separate records at the 
same time.

I used a write through cache approach. When multiple clients attempt to update to multiple records, 
there was a contention between multiple threads trying to update the records. So I introduced another 
locking mechanism in DBWriter class to ensure only one thread can update a record in database at a time
although still allowing threads to update the cache.

a. Server responsibility
    Locking records is the responsibility of DataService layer as mentioned on Section 3.a. This allows
    simplifying client side code and ease of managing locks.

9. General Decisions and Considerations
--------------------------------------------

a. HotelRoomView GUI

	I chose not to limit the visibility of records to the user, so all records are displayed in the 
	JTable, rather than only displaying bookable records e.g records violating 48 hour rule or records 
	already booked by CSR. See below(Section 9.c) for additional 48-hour rationale.	

	When the user attempts to book a room I implemented validation to make sure that a record has been
	selected, then a JDialog user input is verified as being 8 characters long and all digits.

b. ServerUI GUI

	I decided to implement 3 simple server button, i.e., Start, Shutdown, Browse. Once the server is 
	started Start and Browse buttons are disabled. Shutdown button stops server and closes the GUI.

c. 48-hour Rule
    I decided against implementing the 48 hour rule as the dates in the database file are all years in 
    the past. I did not see any point in implementing code that would never be used. If the dates were
    in the future then simple implementation in the GUI code to ensure that only bookable entries are 
    displayed to the user could have been added in. It was also not a "must" requirement.

d. Packaging Structure
    
    I divided the application structure into 9 packages, the application is started from the 
    ApplicationRunner.java class which I placed into the suncertify.init package on its own.
    All packages have a package-info.java file which explains the purpose of the classes in each 
    package.

e. Keeping Clients up-to-date


Model View Controller architecture pattern
    I used a passive implementation model view controller pattern because it was a good fit for what I needed
in the client side code and Swing implementation.
In my application the model is represented by the AbstractTableModel and the information to be sent to
the user. I say passive implementation as my model does not notify the view and controller 
when there has been a change in state/information, the user must manually refresh the table data through
the Load table button or search button with no criteria. I could have used the observer pattern as a method
of notifying the view and controller but did not feel there was sufficient need.
The controller is represented by the HotelFrameController which is a class common to both the network
and stand alone clients. It creates the network/direct connection depending on application mode.
The controller also calls the lock/update/unlock/find/read methods in the data layer through the 
controller methods.
The view is represented by the HotelFrame class, it constructs the Swing GUI components and displays the data in the model.


f. Logging
    I used extensive logging in the application, logging as Level.SEVERE for caught exceptions and
    as Level.INFO for informative messages in the application flow.

g. Rebooking of records
    I do not allow re-booking of records or unbooking. It was not a must requirement
and I believe it is a security risk. If the CSR makes a mistake when entering the number
carelessly then they cannot unbook the record. How would the application know whether it is the same
CSR attempting to unbook the record or another unscrupulous CSR unbooking to make a record available for that CSR's
clients? It would have needed additional implementation and I did not feel it added value to
the application.


