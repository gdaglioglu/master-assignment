-----------------------------------
URLyBird application design choices
-----------------------------------

-----------------
Table of Contents
-----------------
1.General
	a. Code Style
	b. Comments
2. Data Layer
	a. Data Class
	b. Accessing the datafile
	c. The locking mechanism
	d. Cache
	e. DuplicateKeyException
3. Network Layer
	a. RMI v Sockets
	b. Factory Pattern
	c. Remote Interface
4. Presentation Layer
	a. MVC Pattern
	b. AbstractTableModel
	c. ConfigDialog
	d. Searching
5. Utilities
	a. PropertyManager
	b. DataConnector
6. Requirements
	a. 48 hours

----------
1. General
----------
a. Code Style
	I have tried make this code easier for a junior programmer to understand by
	using expressive names for classes and methods, so it is more obvious what
	a class or method is meant to be doing.

b. Comments
	I have added Javadoc to every class and all methods and attributes,
	regardless of how visible they are. I have also tried to avoid single line
	comments and instead explain as much as possible in the javadoc comments.
	Though sometimes, especially the ClientController, I felt the single line
	comments were unavoidable.

-------------
2. Data Layer
-------------
a. Data class
	The Data class implements the provided DBAccess interface. Since this
	interface provides two separable functions, I decided to implement Data
	as a Facade and delegate its functions to two smaller more focused
	classes:
		* Accessing the datafile - provided by DataFileAccess
		* The locking mechanism - provided by DataLockManager

b. Accessing the datafile
	RandomAccessFile is used to read and write to the datafile rather than
	FileInput/OutputStreams. The seek() method provided by RandomAccessFile is
	considerably quicker than the skip() method provided by FileInputStream.
	
	Rather than hard code the field info, I decided to create a RecordFieldInfo
	class that would hold the schema information for each field. These
	RecordFieldInfo objects are dynamically read from the datafile on the first
	read and are stored as a List<> in the Database class for use when reading
	and writing byte[] from/to the datafile.
	
c. The locking mechanism
	The DataLockManager is a singleton class that contains a HashMap of a
	record number as a key and a lockCookie as a value. This lockCookie is the
	thread id of the currently running thread. The lock and unlock
	methods provided by this class are synchronized to provide atomic locking
	and unlocking operations.
	
	The update procedure is made up	of 3 parts all dependent on the locking
	mechanism. First the client tries to lock the record, then it updates the
	record, before finally unlocking the record.
	
	When the updateRecord method is called, the lockCookie is once again
	generated from the thread ID which leaves us with three variables that must
	all match:
		* The generated lockCookie
		* The lockCookie passed to the updateRecord method
		* The value in the HashMap where the key is the record number.
	If any of these three differ, a SecurityException is thrown.

d. Cache
	I decided to implement a RoomRecord class that would be used to store a
	record in memory. The Database class uses a List<> of these RoomRecord
	classes as a cache to reduce the number of RandomAccessFile read calls.
	
	Rather than read every time, the cache is updated before each search
	operation and after every write operation.

e. DuplicateKeyException
	I decided not to throw the DuplicateKeyException from the createRecord
	method as I could not see when it would be thrown. The createRecord method
	will create a record overwriting the first deleted record it finds, or else
	it create a new record at the end of the file after the last existing
	record. In both of these scenarios the createRecord method is avoiding
	existing valid records and therefore avoiding a clash of record numbers.

---------------
3. Network Layer
---------------
a. RMI v Sockets
	I opted to use RMI over Sockets for a number of reasons:
		* Less code needed to implement the server in RMI than sockets
		* Easier to maintain an RMI server using the Factory pattern than a
		multi-threaded sockets server
		* The RMI performance was sufficient for the application

b. Factory Pattern
	After opting for RMI, I needed a way to ensure my server was designed with 
	thread-safety in mind.
	The easiest way to do so is to use the Factory pattern to provide new
	instances of the server to the clients.
	In my code the RemoteServerFactory.getClient() creates a RemoteData object 
	that the networked client can call almost identically to the Data object
	used by the standalone client

c. Remote Interface
	Since I could not modify the DBAccess interface I was given, I created a
	RemoteDBAccess interface that provides the same methods but also throws a
	RemoteException. The RemoteData class that implements this interface is
	then just a Remote wrapper for the Data class, as it references an instance
	of the Data class and simply calls its methods
	
--------------------
4. Presentation Layer
--------------------
a. MVC Pattern
	I opted to implement a very strict MVC pattern where neither the
	ClientModel nor the ClientWindow classes have any knowledge of each other or
	of the ClientController.
	
	This means that if the ClientWindow is replaced in the future it will have
	no impact on the ClientModel and vice versa. Also if the ClientController
	is replaced, there is no impact on either the ClientModel or the
	ClientView.
	
	The down side of this approach is that there is more code between the 3
	components. For example, ClientWindow must provide a method that returns
	the searchButton and ClientController then calls that method and adds an
	ActionListener to it, rather than ClientWindow just adding the
	ActionListener and calling ClientController when the button is pressed.

b. AbstractTableModel
	Since the DBAccess interface returns String[] from many of is methods, I
	decided it would be more efficient to write my own ClientModel that
	implements AbstractTableModel than to use the Vectors provided by the
	DefaultTableModel. While there is much more provided by the
	DefaultTableModel, this	application does not need it. 

c. ConfigDialog
	Rather than implement three separate windows to handle the configuration of
	each client, I opted for a common ConfigDialog class that shows different
	JPanels based on the mode the application is running in.

d. Searching
	I decided that I would search both required fields from a single search box
	as it was a cleaner and simpler search algorithm to implement. If more
	advanced searching is required in the future, the changes only have to be
	made in the client when building the search criteria.

-----------
5. Utilities
-----------
a. Property File
	A singleton PropertyManager class is used to persist the configuration
	details between runs. This class handles the saving (writing using
	FileOutputStream) and loading (reading using FileInputStream) of properties
	to and from the suncertify.properties file.

b. Data Connector
	The DataConnector class is implemented as a utility class that can cater
	for both standalone or networked clients. It seemed a waste to implement
	two separate classes for very similar functionality.

--------------
6. Requirements
--------------
a. 48 hours
	In the Application Overview section of the instructions, it is stated that
	URLyBird only take bookings "within 48 hours of the start the start of
	occupancy". Since it was not stated the application must cater for this
	restriction, I decided that it could be implemented in a future release.