+------------------------------------------------------------------------------+
|     Luke Potter's URLyBird application design and implementation choices     |
+------------------------------------------------------------------------------+

Table of Contents:
------------------
1. Code style
2. Networking decisions
3. Database decisions
4. Property file decisions
5. Concurrency and locking decisions
6. GUI and usability decisions
7. General decision and considerations
--------------------------------------------------------------------------------

1. Code style

I've used many one-liner statements in this project.

Instead of:
    public int sumNumbers(int x, int y) {
        int sum = x + y;
        return sum;
    }

I've used:
    public int sumNumbers(int x, int y) {
        return x + y;
    }

I see my responsibility as a mentor of junior programmers to demonstrate how to
write clear, concise code and eliminate redundant lines of code.

--------------------------------------------------------------------------------

2. Networking decisions

I decided to use RMI in this implementation of URLyBird. Rather than use a RMI
Factory Pattern, I used the suncertify.controller.DatabaseAccessDaoRemote object
to handle the communication across the network. Each Networked Client GUI gets a
reference to a DatabaseAccessDaoRemote object, which it uses to make the remote
calls to the database, via the server.

The server needs to be running for the clients to connect to it.

--------------------------------------------------------------------------------

3. Database decisions

Record Creation Process:
------------------------
When the CSR wants to create a record, it is appended to the end of the Database
file.

--------------------------------------------------------------------------------

4. Property file decisions

--------------------------------------------------------------------------------

5. Concurrency and locking decisions

--------------------------------------------------------------------------------

6. GUI and usability decisions

Search Function:
----------------
I'm only allowing the user to search on the name and location of the Hotel they
would like to book into. I'm implementing the search function this way, as a CSR
may have request for a specific Hotel franchise, or the hotels available in a
location.

The search feature compares the criteria values specified to every record in the
database. When making the comparison it uses the lowercase equivalents of the
strings. Utilising a common case for as a basis for comparison, expands beyond
the requirement, "Fred" matches "Fred" or "Freddy". This means that "fred"
matches "fred", "freddy", "Fred" or "Freddy". I implemented it this way, as some
users may enter lowercase characters, expecting that the search function will
return the same result for "Fred" and "fred". I catered for these users.

I decided against implementing price search logic, as that's not a "must"
feature.


Future GUI Enhancements:
------------------------
I build the GUIs, client and server, out of panels where it was possible. This
will allow the GUIs to be extended in future. Create the newly extended JPanel
class and add it to the UrlyBirdClientGui, or UrlyBirdServerGui, class.

Should functionality to create, edit and delete records be added to the Client GUI in future,

--------------------------------------------------------------------------------

7. General decision and considerations

--------------------------------------------------------------------------------