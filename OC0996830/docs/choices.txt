+------------------------------------------------------------------------------+
|     Luke Potter's URLyBird Application Design and Implementation Choices     |
+------------------------------------------------------------------------------+

Table of Contents:
1. Code Style
2. Networking Decisions
3. Database Decisions
4. Property File Decisions
5. Concurrency and Locking Decisions
6. GUI and Usability Decisions
7. General Decision and Considerations





1. Code Style

1.1. JavaDoc
I've included JavaDoc comments on all the public methods of every class in my
submission. I've not added JavaDoc for the trivial private methods, as I believe
that they are self-explanatory. I've included the JavaDoc for the public methods
of the public classes in the "docs/javadoc/" directory of my submission. I have
many other classes that are have a package level of access, these are not
present in the javadoc library as they are not public classes.


1.2. Class and Method Naming
Throughout the development of my URLyBird application, I've tried to keep the
content of the classes and methods cohesive. This would allow me to use class
and method names that accurately reflect the actions preformed by these classes
and methods. Taking my suncertify.db package for an example of my highly
cohesive classes with accurate names;
 * DatabaseAccessCrudOperations.java handles the creation, retrieval, updating
   and deletion of records in the database.
 * DatabaseAccessLockManager.java handles the locking and unlocking of records
   in the database.
 * DatabaseAccessSearch.java handles searching the database records.

When coding the GUIs, I used panels to cleanly add functionality to the GUI
without the code of the suncertify.gui.client.UrlyBirdClientGui class ballooning
in size. The UrlyBirdClientGui class contains panels which handle specific
functionality;
 * BookingPanel.java handles all the actions surrounding the booking of a room.
 * SearchPanel.java handles all the procedures involved in searching for a room.
 * TablePanel.java contains all the logic needed to display the database records
   in a table on the GUI.


1.3. Code Style
One of the requirements of the project was to write code that a junior
programmer could easily understand. I think I completed this requirement.

I've used many one-liner statements in this project.

Instead of:
    public int sumNumbers(int x, int y) {
        int sum = x + y;
        return sum;
    }

I've used:
    public int sumNumbers(int x, int y) {
        return x + y;
    }

I see my responsibility as a mentor of junior programmers to demonstrate how to
write clear, concise code and eliminate redundant lines of code.






2. Networking decisions

2.1. RMI vs Sockets
I decided to use RMI for the network communication portion of my project. RMI
allows methods on an object to be called over the network. This object oriented
approach is implemented cleanly and the code is quite concise.

The other option for networking was Sockets. Sockets have the advantage of
giving the developer control to create threads. Implementing a Socket based
network communication layer involves a larger amount of code, compared to RMI.


2.2. RMI Implementation
I decided to use RMI in this implementation of URLyBird. Rather than use a RMI
Factory Pattern, I used the suncertify.controller.DatabaseAccessDaoRemote object
to handle the communication across the network. Each Networked Client GUI gets a
reference to a DatabaseAccessDaoRemote object, which it uses to make the remote
calls to the database, via the server.

The server needs to be running for the clients to connect to it.

The server and it's clients need to same RMI URL to connect to each other. The
suncertify.properties file must have entries which allow the server and client
to form the correct RMI URL.

Example of the required entries in suncertify.properties.
    rmiHostname=localhost
    rmiPortNumber=1234

The server, along with the RMI URL properties, needs the location of the
database specified.

Example of the required entries in suncertify.properties.
    pathToDatabaseFile=db-1x1.db


2.3. DAO Pattern
I utilised a DAO pattern to give my Client GUIs access to the database. This
gives any type of client access to the defined functions, search, retrieve and
book rooms. Taking the approach of using the DAO pattern allowed me to use
HotelRoom objects rather than positions in a string array.

I implemented the suncertify.controller.DatabaseAccessDao interface in two ways,
 * DatabaseAccessDaoLocal is used by clients connecting directly to the database
   file. When the application is run in standalone mode, the local DAO is used.
 * DatabaseAccessDaoRemote is used by clients connecting to the database over
   the network. When the application is run in networked client mode, the remote
   DAO is used.


2.4. Extra Remote Interface
I needed to use an extra interface, suncertify.rmi.DatabaseAccessRemote, this
interface is almost identical to the suncertify.db.DBAccess interface except
that it extends the Remote interface. Extending the Remote interface requires
that the methods in that interface throw RemoteException. This situation arose,
only because I was not allowed to edit the DBAccess interface, under the
stipulations of the project.






3. Database Decisions

3.1. Object Orientated Approach
Because the database layer utilises string arrays for storing data, I decided to
create a pojo to store the data related to each field in a relevant object type.
The object suncertify.model.HotelRoom was used. The HotelRoom object has a
constructor that takes a string array, this allows database records to be
converted into HotelRoom object easily for retrieval queries. The HotelRoom
object has the method toStringArray this allows a database record to be created
from a HotelRoom object in the case of a query that writes to the database.

Calling getter and setter methods on an object in order to retrieve and update
information is a better approach than referring to positions in a string array.


3.2. Facade Pattern
To keep my code cohesive and to keep the classes to a respectable size, I used a
Facade pattern when implementing the suncertify.db.DBAccess interface. The
Facade pattern is used to implement an interface when the word "and" is used to
describe the functionality of that interface.

The methods in the DBAccess interface can be described as follows;
  "The DBAccess interface handles the CRUD operations, the search functionality
   and the record locking."

The description of the DBAccess interface identified three separate areas on
functionality.
 * CRUD operations,
 * Search functionality,
 * Record locking

As such when interface is being implemented by the suncertify.db.Data class, I
just sent the call to the methods to the various classes that were designed to
implement that specific piece of functionality.


3.3. Record Creation Process
When the CSR wants to create a record, it is appended to the end of the Database
file. If the record already exists in the database, which is determined by
performing a search on the name and location of the record attempting to be
created, a DuplicateKeyException is thrown.


3.4. Record Deletion Process
When the CSR want to delete a record, only the bit at the start of the record
changed. The contents of the record are still present in the database file.


3.5. Random Access File
I used RandomAccessFile to handle the database file input and output.
RandomAccessFile has the seek method, which is useful for navigating the file
pointer to the record to be accessed. The readBytes and writeBytes methods were
instrumental in allowing the reading and writing of the record values.

The other option for database file I/O was to use FileInputStream and
FileOutputStream. I felt that the exacting control that RandomAccessFile's read
and write methods, which deal with bytes, better served my needs.


3.6. Caching Records
I decided against using a cache of the records. Reading the records into a
List<HotelRoom> would have some advantages, in terms of swiftly accessing the
records. But if records were created or updated and the program crashed, the
record cache's contents would be lost. This would result in CSR's bookings not
taking effect. Even writing the cache to file every minute, still poses a risk
of a booking not being recorded due to a crash.

To eliminate the issues surrounding the cache and the database file going out of
sync, I decided to access the database file directly. This approach makes the
database operations as atomic as possible.





4. Property File Decisions

4.1. Property Management
I used a single properties object throughout the application. The application
properties are stored in the
suncertify.utilities.UrlyBirdApplicationObjectsFactory class. The properties
object instance is retrieved by calling
UrlyBirdApplicationObjectsFactory.getUrlyBirdApplicationProperties() method.


4.2. Required Properties
The properties file must be in the current user directory. It must be called
"suncertify.properties". If the suncertify.properties file does not exist, it
will be created on the start up of the application. It will be initialised with
default properties.

I decided to use three properties in the application;
  * pathToDatabaseFile
  * rmiHostname
  * rmiPortNumber

These three properties must be present in the suncertify.properties file for the
server to function.
The standalone client only requires the "pathToDatabaseFile" property.
The networked client requires both the "rmiHostname" and "rmiPortNumber" to be
present.

Example of the suncertify.properties.
    pathToDatabaseFile=db-1x1.db
    rmiHostname=localhost
    rmiPortNumber=1234





5. Concurrency and Locking Decisions

In the provided interface file, suncertify.db.DBAccess, the lockRecord() and
unlock() methods are implemented by suncertify.db.Data. The Data class is a
facade, so the logic for the lockRecord() and unlock() methods is located in
suncertify.db.DatabaseAccessLockManager.

DatabaseAccessLockManager is a singleton class. It's public interface, for
locking and unlocking records has four synchronised methods;
  * lock
  * unlock
  * lockRecordWhenCreatingNewRecord
  * unlockRecordWhenCreatingOrDeletingRecord

The lock() and unlock() methods are for obtaining a lock on records that already
exist, and that will exist after the intervening operations have been completed.
So these methods are useful for obtaining lock when updating and reading
records.

The lockRecordWhenCreatingNewRecord() and
unlockRecordWhenCreatingOrDeletingRecord() methods are for obtaining locks on
records that do not yet exists, or that will not exist after the intervening
operation have been completed. These methods are useful for obtaining lock when
creating and deleting records.

DatabaseAccessLockManager has a HashMap that maps record numbers to lock
cookies.

When trying to lock a record it checks if the record is in the HashMap.
If the record is present, it waits, until the HashMap entry is no longer there.
It then puts the entry in the HashMap, thereby obtaining the lock.

When trying to unlock a record it checks if there is an entry in the HashMap for
the record and cookie. It then removes the record, there by releasing the lock.





6. GUI and Usability Decisions

6.1. Logging into the Client GUI
When opening the Client GUI, you will be prompted for your CSR number. This will
be the id used to book rows for the duration of this GUI's existence. Asking for
the CSR number at the start eliminates the process of having to repeatedly enter
it when booking.


6.2. Client GUI's Table of Records
The Client GUI is populated with a table of records. These are the valid records
that are present in the database file. The "Date Available" column will display
the date that the room is available on, if that date is in the future. Otherwise
it will presume that the room's booking has expires and display "Available". I
think that this is a good feature, as it displays the information in as an
easily recognisable way to distinguish between the booked and available records.

There is one issue, if the room is showing "Available", it may also show the CSR
number of the last user to book that room. This is because there is no process
that is constantly checking the database for expired bookings and deleting the
CSR number from these records.


6.3. Client GUI's Search Function
I'm only allowing the user to search on the name and location of the Hotel they
would like to book into. I'm implementing the search function this way, as a CSR
may have request for a specific Hotel franchise, or the hotels available in a
location.

The search feature compares the criteria values specified to every record in the
database. When making the comparison it uses the lowercase equivalents of the
strings. Utilising a common case for as a basis for comparison, expands beyond
the requirement, "Fred" matches "Fred" or "Freddy". This means that "fred"
matches "fred", "freddy", "Fred" or "Freddy". I implemented it this way, as some
users may enter lowercase characters, expecting that the search function will
return the same result for "Fred" and "fred". I catered for these users.

I decided against implementing price search logic, as that's not a "must"
feature.


6.4. Booking a Room using the Client GUI
When booking a room a row in the table must be selected. A dialog box will pop
up, and ask for the CSR which day they would like the booking to start on, this
is to enforce the 48 hour booking start time requirement. Overall this choice of
"Today" or "Tomorrow" has no effect on the application.

After choosing the start date, the user is prompted for the end date of the
booking. This must be in the format "yyyy/MM/dd", e.g. "2014/05/30" for May 30th
2014.

The record is then booked and the table is refreshed for the booking GUI.


6.5. Refreshing the Client GUI's table of records
In a situation where multiple clients are booking rooms, it is necessary to have
up to have the latest information on which rooms are free.

To refresh your GUI's table records;
  1. Clear the "Name" and "Location" Text Fields.
  2. Click the "Search" Button.


6.6. Future Client GUI Enhancements
I built the GUIs, client and server, out of panels, where it was possible. This
will allow the GUIs to be extended in future. Create the newly extended JPanel
class and add it to the UrlyBirdClientGui, or UrlyBirdServerGui, class.

Should functionality to create, edit and delete records be added to the Client
GUI in future, it should be relatively straight forward to add them to the GUI.

The implementation of an Observer, or MVC, pattern would allow the table of
records on all client GUIs to be updated after any client makes booking.

When viewing a search result, there is an issue when trying to make a booking.
Say a search returns three results, and the client tries to book result number
three. Only the table row number is recorded, so record three in the database
will be booked. This is an area for future enhancement of the GUI.


6.7. Server GUI
The server GUI has three text fields, each representing an entry in the
suncertify.properties file. The server GUI will be preloaded with the
properties from the properties file.

The server will not start unless;
 * the "pathToDatabaseFile" property points to an existing file,
 * the "rmiHostname" is set to a correctly formatted IP address, or "localhost",
 * the "rmiPortNumber" is set to a value comprising of digits.

Example of the suncertify.properties.
    pathToDatabaseFile=db-1x1.db
    rmiHostname=localhost
    rmiPortNumber=1234





7. General Decision and Considerations

7.1. Canceling of Bookings
I chose not to implement functionality to cancel bookings. This was not a must
requirement.


7.2. Rebooking of Booked Records
I chose to allow the booked records to be rebooked. I trust the CSR to book only
the rows with "Available" in the "Date Available" column. The application
doesn't include a booking cleanup function to remove the CSR number from a
record with "Available" in the "Date Available" column. So the records
displaying "Available" are allowed to be booked.

If a CSR books the wrong record, they can rebook the incorrect record with a
date in the past, so that the records will display "Available".